#!/bin/bash
set -euo pipefail

# Disable IPv6 via sysctl

# Append settings to sysctl.conf to disable IPv6
cat <<EOF >> /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF

# Apply the sysctl changes immediately
sysctl -p

# Disable IPv6 for current session without reboot
for iface in $(ls /proc/sys/net/ipv6/conf/); do
  sysctl -w net.ipv6.conf.$iface.disable_ipv6=1
done

# Disable IPv6 at the GRUB bootloader level (this will take effect on the next reboot)
sed -i 's/GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX="\1 ipv6.disable=1"/' /etc/default/grub

# Update GRUB to apply the new boot parameters (but don't reboot)
update-grub

# Force apt to use IPv4
cat <<EOF >> /etc/apt/apt.conf.d/99force-ipv4
Acquire::ForceIPv4 "true";
EOF

sudo -u ubuntu -i <<'EOF'
set -euo pipefail

# Function to check if a package is installed
is_installed() {
    dpkg -l | grep -q "^ii  $1"
}

# Function to install a package if it is not installed
install_if_missing() {
    if ! is_installed "$1"; then
        echo "Installing $1..."
        sudo apt-get install -y "$1"
    else
        echo "$1 is already installed."
    fi
}

sudo apt-get update
sudo apt-get update --fix-missing

# Packages to check and install
for package in libc6 groff less unzip apt-transport-https ca-certificates curl gnupg gpg jq software-properties-common; do
    install_if_missing "$package"
done

# Check if AWS Cli is installed and if not install and verify it
if ! command -v aws &> /dev/null; then
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    if [ $? -ne 0 ]; then
        echo "Failed to download AWS CLI"
        exit 1
    fi

    unzip awscliv2.zip
    if [ $? -ne 0 ]; then
        echo "Failed to unzip AWS CLI"
        exit 1
    fi

    sudo ./aws/install
    if [ $? -ne 0 ]; then
        echo "Failed to install AWS CLI"
        exit 1
    fi

    aws --version
    if [ $? -ne 0 ]; then
        echo "AWS CLI installation verification failed"
        exit 1
    fi
fi

curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"

sudo dpkg -i session-manager-plugin.deb

######### Install kubectl and Helm #########
if ! [ -d /etc/apt/keyrings ]; then
  sudo mkdir -p -m 755 /etc/apt/keyrings
fi

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
# Allow unprivileged APT programs to read this keyring
sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
# Helps tools such as command-not-found to work correctly
sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list

curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list

sudo apt-get update
sudo apt-get install -y kubectl helm

sudo hostnamectl set-hostname bastion

# disable swap memory
sudo swapoff -a

# add the command to crontab to make it persistent across reboots
(crontab -l 2>/dev/null || true; echo "@reboot /sbin/swapoff -a") | crontab -

# Function to fetch the kube config from Secrets Manager
fetch_kube_config() {
  aws secretsmanager get-secret-value --secret-id ${kube_config_secret_name} --region ${aws_region} --query SecretString --output text 2>&1
}

# Retry loop to fetch the Kube config
retries=0
max_retries=10
while true; do
  if [[ $retries -ge $max_retries ]]; then
    echo "Maximum retries reached. Kube config is still not available or can't be fetched."
    exit 1
  fi
  # Capture both output and exit status
  KUBE_CONFIG=$(fetch_kube_config || true) # Prevent immediate exit on failure
  EXIT_STATUS=$?

  # Check if the command succeeded
  if [ $EXIT_STATUS -eq 0 ]; then
    echo "Successfully retrieved Kube config."
    break
  elif [[ "$KUBE_CONFIG" == *"ResourceNotFoundException"* ]]; then
    echo "Secret not found yet, retrying in 15 seconds..."
  else
    echo "An unexpected error occurred: $KUBE_CONFIG"
  fi

  # Wait before retrying
  echo "Waiting to retry to fetch Kube config... Retry #$((retries + 1))"
  ((retries++))
  sleep 15
done

if ! [ -d $HOME/.kube ]; then
  mkdir -p $HOME/.kube
fi
printf "%s\n" "$KUBE_CONFIG" > $HOME/.kube/config
sudo chown -R ubuntu:ubuntu $HOME/.kube
sudo chmod 700 $HOME/.kube
sudo chmod 600 $HOME/.kube/config

mkdir $HOME/kubernetes

echo -e "Done bootstrapping Bastion.\n"
EOF
