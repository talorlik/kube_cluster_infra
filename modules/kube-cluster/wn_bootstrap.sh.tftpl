#!/bin/bash
set -euo pipefail

# Disable systemd-resolved
systemctl stop systemd-resolved
systemctl disable systemd-resolved

# Remove the symbolic link for resolv.conf (managed by systemd)
rm /etc/resolv.conf

# Create a new resolv.conf with the correct DNS settings for AWS VPC
cat <<EOF > /etc/resolv.conf
nameserver 10.0.0.2
search ec2.internal
options edns0 trust-ad
EOF

# Disable IPv6 via sysctl

# Append settings to sysctl.conf to disable IPv6
cat <<EOF >> /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF

# Apply the sysctl changes immediately
sysctl -p

# Disable IPv6 for current session without reboot
for iface in $(ls /proc/sys/net/ipv6/conf/); do
  sysctl -w net.ipv6.conf.$iface.disable_ipv6=1
done

# Disable IPv6 at the GRUB bootloader level (this will take effect on the next reboot)
sed -i 's/GRUB_CMDLINE_LINUX="\(.*\)"/GRUB_CMDLINE_LINUX="\1 ipv6.disable=1"/' /etc/default/grub

# Update GRUB to apply the new boot parameters (but don't reboot)
update-grub

# Force apt to use IPv4
cat <<EOF >> /etc/apt/apt.conf.d/99force-ipv4
Acquire::ForceIPv4 "true";
EOF

# sysctl params required by setup, params persist across reboots
cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
EOF

# apply sysctl params without reboot
sysctl --system

# disable swap memory
sudo swapoff -a

# add the command to crontab to make it persistent across reboots
(crontab -l 2>/dev/null || true; echo "@reboot /sbin/swapoff -a") | crontab -

# Check if the module is loaded
if ! lsmod | grep -q br_netfilter; then
  echo "br_netfilter module is not loaded. Loading it now..."
  sudo modprobe br_netfilter

  # Verify that the module was loaded successfully
  if lsmod | grep -q br_netfilter; then
    echo "br_netfilter module loaded successfully."
  else
    echo "Failed to load br_netfilter module."
  fi
else
  echo "br_netfilter module is already loaded."
fi

# Function to check if a package is installed
is_installed() {
  dpkg -l | grep -q "^ii  $1"
}

# Function to install a package if it is not installed
install_if_missing() {
  if ! is_installed "$1"; then
    echo "Installing $1..."
      apt-get install -y "$1"
  else
    echo "$1 is already installed."
  fi
}

apt-get update
apt-get update --fix-missing

# Packages to check and install
for package in libc6 groff less unzip curl ca-certificates gnupg gpg jq software-properties-common apt-transport-https socat; do
  install_if_missing "$package"
done

sudo -u ubuntu -i <<'EOF'
set -euo pipefail

# Check if AWS CLI is installed and if not install and verify it
if ! command -v aws &> /dev/null; then
  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  unzip awscliv2.zip
  sudo ./aws/install
  aws --version
fi

# install cri-o kubelet kubeadm
KUBERNETES_VERSION=${k8s_version}
PROJECT_PATH=prerelease:/main

if ! [ -d /etc/apt/keyrings ]; then
  sudo mkdir -p -m 755 /etc/apt/keyrings
fi

curl -fsSL https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
sudo echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

curl -fsSL https://pkgs.k8s.io/addons:/cri-o:/$PROJECT_PATH/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg
sudo echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/$PROJECT_PATH/deb/ /" | sudo tee /etc/apt/sources.list.d/cri-o.list

sudo apt-get update
sudo apt-get install -y cri-o kubelet kubeadm
sudo apt-mark hold kubelet kubeadm

# start the container runtime
sudo systemctl start crio.service
sudo systemctl enable --now crio.service
sudo systemctl enable --now kubelet

# update kubelet extra args
KUBELET_DEFAULTS_FILE="/etc/default/kubelet"
EXTRA_ARGS="--cloud-provider=external --image-credential-provider-bin-dir=/usr/local/bin/ --image-credential-provider-config=/etc/kubernetes/ecr-credential-provider-config.yaml"
if grep -q "KUBELET_EXTRA_ARGS" "$KUBELET_DEFAULTS_FILE"; then
  if ! grep -q -- "$EXTRA_ARGS" "$KUBELET_DEFAULTS_FILE"; then
    echo "$(sudo cat $KUBELET_DEFAULTS_FILE)\"$EXTRA_ARGS\"" | sudo tee "$KUBELET_DEFAULTS_FILE"
  fi
else
  echo "KUBELET_EXTRA_ARGS=\"$EXTRA_ARGS\"" | sudo tee "$KUBELET_DEFAULTS_FILE"
fi

# create CredentialProviderConfig for ECR users
sudo curl -Lo /usr/local/bin/ecr-credential-provider https://artifacts.k8s.io/binaries/cloud-provider-aws/v1.29.0/linux/amd64/ecr-credential-provider-linux-amd64
sudo chmod +x /usr/local/bin/ecr-credential-provider
sudo tee /etc/kubernetes/ecr-credential-provider-config.yaml <<CRED_EOF > /dev/null
apiVersion: kubelet.config.k8s.io/v1
kind: CredentialProviderConfig
providers:
  - name: ecr-credential-provider
    matchImages:
      - "*.dkr.ecr.*.amazonaws.com"
    defaultCacheDuration: "12h"
    apiVersion: credentialprovider.kubelet.k8s.io/v1
CRED_EOF

# sudo systemctl restart kubelet

# sleep 60

# Function to fetch the join command from Secrets Manager
fetch_join_command() {
  # Disable immediate exit on error for this command
  set +e
  local output=$(aws secretsmanager get-secret-value --secret-id "${join_secret_name}" --region "${aws_region}" --query SecretString --output text 2>&1)
  local status=$?
  # Re-enable immediate exit on error
  set -e
  # Return the output
  echo "$output"
  # Return the exit status
  return $status
}

# Retry loop to fetch the join command
retries=0
max_retries=15
backoff_time=30
while true; do
  if [[ $retries -ge $max_retries ]]; then
    echo "Maximum retries reached. Join command is still not available or can't be fetched."
    exit 1
  fi

  # Capture both output and exit status
  JOIN_COMMAND=$(fetch_join_command)
  EXIT_STATUS=$?

  # Check if the command succeeded
  if [ $EXIT_STATUS -eq 0 ] && [ -n "$JOIN_COMMAND" ] && [[ "$JOIN_COMMAND" != *"ResourceNotFoundException"* ]]; then
    echo "Successfully retrieved join command."
    break
  else
    echo "An error occurred: $JOIN_COMMAND."
  fi

  # Wait before retrying
  echo "Waiting $backoff_time seconds to retry fetching the join command..."
  sleep $backoff_time
  ((backoff_time *= 2))
  ((retries++))
done

# Print and run the join command
echo "Executing: $JOIN_COMMAND"
eval "$JOIN_COMMAND"

echo -e "Done bootstrapping Worker Node.\n"
EOF
