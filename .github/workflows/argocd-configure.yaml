name: ArgoCD Install and Configure

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'Select AWS Region'
        required: true
        type: choice
        default: 'us-east-1: N. Virginia'
        options:
          - 'us-east-1: N. Virginia'
          - 'us-east-2: Ohio'
      environment:
        description: 'Select Environment'
        required: true
        type: choice
        default: prod
        options:
          - prod
          - dev

jobs:
  GetKubeClusterRunId:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.set_run_id.outputs.run_id }}
    steps:
      - name: Check and install curl
        run: |
          if ! command -v curl &> /dev/null
          then
            echo "curl could not be found. Installing curl..."
            sudo apt-get update
            sudo apt-get install -y curl
          else
            echo "curl is already installed."
          fi

      - name: Check and install jq
        run: |
          if ! command -v jq &> /dev/null
          then
            echo "jq could not be found. Installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Fetch the latest successful workflow run ID from the infra deployment
        id: set_run_id
        run: |
          LATEST_SUCCESS=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/talorlik/kube_cluster_infra/actions/workflows/infra-provisioning-region.yaml/runs?status=success&per_page=1" \
            | jq -r '.workflow_runs[0].id')

          echo "run_id=$LATEST_SUCCESS" >> $GITHUB_OUTPUT

          echo "The latest successful run ID is $LATEST_SUCCESS"

  GetAuxInfraRunId:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.set_run_id.outputs.run_id }}
    steps:
      - name: Check and install curl
        run: |
          if ! command -v curl &> /dev/null
          then
            echo "curl could not be found. Installing curl..."
            sudo apt-get update
            sudo apt-get install -y curl
          else
            echo "curl is already installed."
          fi

      - name: Check and install jq
        run: |
          if ! command -v jq &> /dev/null
          then
            echo "jq could not be found. Installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Fetch the latest successful workflow run ID from the infra deployment
        id: set_run_id
        run: |
          LATEST_SUCCESS=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/talorlik/polybot_yolo5_aux_infra/actions/workflows/infra-provisioning-region.yaml/runs?status=success&per_page=1" \
            | jq -r '.workflow_runs[0].id')

          echo "run_id=$LATEST_SUCCESS" >> $GITHUB_OUTPUT

          echo "The latest successful run ID is $LATEST_SUCCESS"

  SetGlobals:
    runs-on: ubuntu-latest
    needs:
      - GetKubeClusterRunId
      - GetAuxInfraRunId
    outputs:
      region_code: ${{ steps.set_region.outputs.region_code }}
      aws_account: ${{ steps.set_kube_values.outputs.aws_account }}
      ecr_repository_url: ${{ steps.set_kube_values.outputs.ecr_repository_url }}
      telegram_app_url: ${{ steps.set_kube_values.outputs.telegram_app_url }}
      sub_domain_secret: ${{ steps.set_kube_values.outputs.sub_domain_secret }}
      telegram_secret: ${{ steps.set_aux_infra_values.outputs.telegram_secret }}
      sqs_queue_identify: ${{ steps.set_aux_infra_values.outputs.sqs_queue_identify }}
      sqs_queue_results: ${{ steps.set_aux_infra_values.outputs.sqs_queue_results }}
      bucket_name: ${{ steps.set_aux_infra_values.outputs.bucket_name }}
      bucket_prefix: ${{ steps.set_aux_infra_values.outputs.bucket_prefix }}
      table_name: ${{ steps.set_aux_infra_values.outputs.table_name }}
      bastion_pem_file_name: ${{ steps.set_kube_values.outputs.bastion_pem_file_name }}
      bastion_public_ip: ${{ steps.set_kube_values.outputs.bastion_public_ip }}
    steps:
      - name: Check and Install jq
        run: |
          if ! command -v jq &> /dev/null
          then
            echo "jq could not be found. Installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Set Region
        id: set_region
        run: |
          SELECTED_REGION="${{ inputs.region }}"
          echo "region_code=${SELECTED_REGION%%:*}" >> $GITHUB_OUTPUT

      - name: Download Kube outputs file
        uses: actions/download-artifact@v4
        with:
          name: "${{ inputs.environment }}-kube-cluster-outputs.json"
          github-token: "${{ secrets.GH_TOKEN }}"
          repository: talorlik/kube_cluster_infra
          run-id: ${{ needs.GetKubeClusterRunId.outputs.run_id }}

      - name: Download Aux Infra outputs file
        uses: actions/download-artifact@v4
        with:
          name: "${{ steps.set_region.outputs.region_code }}-${{ inputs.environment }}-aux-infra-tf-outputs.json"
          github-token: ${{ secrets.GH_TOKEN }}
          repository: talorlik/polybot_yolo5_aux_infra
          run-id: ${{ needs.GetAuxInfraRunId.outputs.run_id }}

      - name: Extract outputs from Kube file and set as environment variables
        id: set_kube_values
        env:
          ARTIFACT_NAME: "${{ inputs.environment }}-kube-cluster-outputs.json"
        run: |
          echo "aws_account=$(jq -r '.aws_account.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "ecr_repository_url=$(jq -r '.ecr_repository_url.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "telegram_app_url=https://$(jq -r '.common_name.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "sub_domain_secret=$(jq -r '.sub_domain_cert_body_secret_name.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "bastion_pem_file_name=$(jq -r '.bastion_pem_file_name.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "bastion_public_ip=$(jq -r '.bastion_public_ip.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT

      - name: Extract outputs from Aux Infra file and set as environment variables
        id: set_aux_infra_values
        env:
          ARTIFACT_NAME: "${{ steps.set_region.outputs.region_code }}-${{ inputs.environment }}-aux-infra-tf-outputs.json"
        run: |
          echo "telegram_secret=$(jq -r '.telegram_secret_name.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "sqs_queue_identify=$(jq -r '.identify_queue_name.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "sqs_queue_results=$(jq -r '.results_queue_name.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "bucket_name=$(jq -r '.s3_bucket_name.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "bucket_prefix=$(jq -r '.s3_bucket_prefix.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT
          echo "table_name=$(jq -r '.table_name.value' ${{ github.workspace }}/${{ env.ARTIFACT_NAME }})" >> $GITHUB_OUTPUT

  Configure:
    runs-on: ubuntu-latest
    needs:
      - GetKubeClusterRunId
      - SetGlobals
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ needs.SetGlobals.outputs.region_code }}
      ECR_REPOSITORY_URL: ${{ needs.SetGlobals.outputs.ecr_repository_url }}
      POLYBOT_IMAGE_PLUS_TAG: "polybot-v2-${{ github.run_number }}"
      YOLO5_IMAGE_PLUS_TAG: "yolo5-v2-${{ github.run_number }}"
      TELEGRAM_APP_URL: ${{ needs.SetGlobals.outputs.telegram_app_url }}
      TELEGRAM_SECRET: ${{ needs.SetGlobals.outputs.telegram_secret }}
      SUB_DOMAIN_SECRET: ${{ needs.SetGlobals.outputs.sub_domain_secret }}
      SQS_QUEUE_IDENTIFY: ${{ needs.SetGlobals.outputs.sqs_queue_identify }}
      SQS_QUEUE_RESULTS: ${{ needs.SetGlobals.outputs.sqs_queue_results }}
      BUCKET_NAME: ${{ needs.SetGlobals.outputs.bucket_name }}
      BUCKET_PREFIX: ${{ needs.SetGlobals.outputs.bucket_prefix }}
      TABLE_NAME: ${{ needs.SetGlobals.outputs.table_name }}
      LOCAL_PATH: /home/runner/.ssh
      BASTION_PEM_FILE_NAME: ${{ needs.SetGlobals.outputs.bastion_pem_file_name }}
      BASTION_PUBLIC_IP: ${{ needs.SetGlobals.outputs.bastion_public_ip }}
    steps:
      - name: Download Bastion SSH key
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.BASTION_PEM_FILE_NAME }}"
          github-token: "${{ secrets.GH_TOKEN }}"
          repository: talorlik/kube_cluster_infra
          run-id: ${{ needs.GetKubeClusterRunId.outputs.run_id }}
          path: "${{ env.LOCAL_PATH }}"

      - name: Set permissions for SSH key and directory
        run: |
          chmod 400 ${{ env.LOCAL_PATH }}/${{ env.BASTION_PEM_FILE_NAME }}
          chmod 700 ${{ env.LOCAL_PATH }}

      - name: Deploy ArgoCD
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ env.BASTION_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.LOCAL_PATH }}/${{ env.BASTION_PEM_FILE_NAME }}
          port: 22
          script: |
            # Set up ArgoCD CLI and Install ArgoCD
            VERSION=$(curl -L -s https://raw.githubusercontent.com/argoproj/argo-cd/stable/VERSION)
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/v$VERSION/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
            rm argocd-linux-amd64

            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

            # Patch existing ingress to include ArgoCD path
            kubectl patch ingress alb-ingress-connect-nginx -n ingress-nginx \
              --type='json' \
              -p='[
                {
                  "op": "add",
                  "path": "/spec/rules/0/http/paths/-",
                  "value": {
                    "path": "/argo-cd(/|$)(.*)",
                    "pathType": "ImplementationSpecific",
                    "backend": {
                      "service": {
                        "name": "argocd-server",
                        "port": {
                          "number": 443
                        }
                      }
                    }
                  }
                }
              ]'

            # Set up ArgoCD applications (polybot and yolo5)
            argocdPassword=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode)

            argocd login --insecure --username admin --password $argocdPassword --grpc-web $(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

            argocd app create polybot \
              --repo https://github.com/talorlik/polybot_service.git \
              --path helm/polybot \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace polybot \
              --helm-set namespace=polybot \
              --helm-set image.repository=${{ env.ECR_REPOSITORY_URL }}
              --helm-set image.tag=${{ env.POLYBOT_IMAGE_PLUS_TAG }}
              --helm-set env.AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}
              --helm-set env.TELEGRAM_APP_URL=${{ env.TELEGRAM_APP_URL }}
              --helm-set env.TELEGRAM_SECRET=${{ env.TELEGRAM_SECRET }}
              --helm-set env.SUB_DOMAIN_SECRET=${{ env.SUB_DOMAIN_SECRET }}
              --helm-set env.SQS_QUEUE_IDENTIFY=${{ env.SQS_QUEUE_IDENTIFY }}
              --helm-set env.SQS_QUEUE_RESULTS=${{ env.SQS_QUEUE_RESULTS }}
              --helm-set env.BUCKET_NAME=${{ env.BUCKET_NAME }}
              --helm-set env.BUCKET_PREFIX=${{ env.BUCKET_PREFIX }}
              --helm-set env.TABLE_NAME=${{ env.TABLE_NAME }}

            argocd app create yolo5 \
              --repo https://github.com/talorlik/yolo5_service.git \
              --path helm/yolo5 \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace yolo5 \
              --helm-set namespace=yolo5 \
              --helm-set image.repository=${{ env.ECR_REPOSITORY_URL }}
              --helm-set image.tag=${{ env.YOLO5_IMAGE_PLUS_TAG }}
              --helm-set env.AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}
              --helm-set env.SQS_QUEUE_IDENTIFY=${{ env.SQS_QUEUE_IDENTIFY }}
              --helm-set env.SQS_QUEUE_RESULTS=${{ env.SQS_QUEUE_RESULTS }}
              --helm-set env.BUCKET_NAME=${{ env.BUCKET_NAME }}
              --helm-set env.BUCKET_PREFIX=${{ env.BUCKET_PREFIX }}
              --helm-set env.TABLE_NAME=${{ env.TABLE_NAME }}

            argocd app sync polybot
            argocd app sync yolo5
